apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
 apply plugin: 'kotlin-kapt'

// 依赖 tinker 插件脚本
apply from: 'tinker-support.gradle'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId "com.cxz.wanandroid"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary = true

        multiDexEnabled true
        // flavorDimensions "versionCode"

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }

    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false

        disable 'CheckResult'
    }

    signingConfigs {
        releaseConfig {
            storeFile file("../cxz.jks")
            storePassword project.hasProperty("KEYSTORE_PASS") ? KEYSTORE_PASS : System.getenv("KEYSTORE_PASS")
            keyAlias project.hasProperty("ALIAS_NAME") ? ALIAS_NAME : System.getenv("ALIAS_NAME")
            keyPassword project.hasProperty("ALIAS_PASS") ? ALIAS_PASS : System.getenv("ALIAS_PASS")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true // 自动清理无用资源
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
            android.applicationVariants.all { variant ->
                // 更新至Android Studio 3.3 gradle 4.10.1
                variant.outputs.all {
                    outputFileName = "WanAndroid-release.apk"
                }
            }
        }
        debug {
            resValue("string", "PORT_NUMBER", "8081")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

//    productFlavors {
//
//    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    dexOptions {
        dexInProcess true
        preDexLibraries true
        javaMaxHeapSize "4g"
        // incremental true
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
}

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    testImplementation rootProject.ext.testDeps["junit"]
    androidTestImplementation rootProject.ext.testDeps["runner"]
    androidTestImplementation rootProject.ext.testDeps["espresso-core"]

    // leakCanary
    debugImplementation rootProject.ext.testDeps["leakcanary-debug"]
    releaseImplementation rootProject.ext.testDeps["leakcanary-release"]

    debugImplementation rootProject.ext.testDeps["debug-db"]

    implementation rootProject.ext.androisxLibs
    // Support库
    // implementation rootProject.ext.supportLibs
    // 网络请求库
    implementation rootProject.ext.networkLibs
    // RxJava2
    implementation rootProject.ext.rxJavaLibs
    implementation rootProject.ext.commonLibs
    // APT dependencies(Kotlin内置的注解处理器)
    kapt rootProject.ext.annotationProcessorLibs

    implementation project(':lib_multiple_view')
}
